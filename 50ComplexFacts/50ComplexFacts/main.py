from manim import *
class DefaultTemplate(Scene):
    def intro(self):
        # Fact 1
        squ1 = Square().scale(.75)
        squ2 = Square().scale(.75)
        self.play(Create(squ1), Create(squ2))
        self.play(Rotate(squ2, PI/4))
        oct = RegularPolygon(n=8, color=WHITE).scale(1.07)
        self.play(Create(oct))
        txt = Text("AlgeBro").scale(.5)
        self.play(Write(txt))
        self.wait()
        self.play(Uncreate(squ1), Uncreate(squ2), Uncreate(oct), Unwrite(txt))
        self.wait()


    def construct(self):
        self.intro()

        introQues = Tex(r'What is a Complex Number ($\mathbb{C}$)?', font_size=20)
        self.play(FadeIn(introQues, shift=DOWN))
        self.wait()
        self.play(FadeOut(introQues))
        self.wait()

        R = Tex(r'$\mathbb{R}$', font_size=20)
        rarr = Tex(r'$\rightarrow$', font_size=20).next_to(R, RIGHT*.5)
        mathSym = Tex(r'$+, -, \times, \div$', font_size=20).next_to(rarr, RIGHT*.5)
        REx = Tex(r'$1, 1/2, \pi, \dots \ni$', font_size=20).next_to(R, LEFT*.5)
        self.play(FadeIn(R, shift=DOWN))
        self.wait()
        self.play(FadeIn(rarr, shift=DOWN), FadeIn(mathSym, shift=DOWN))
        self.wait()
        self.play(FadeIn(REx, shift=DOWN))
        self.wait()
        self.play(FadeOut(R, shift=DOWN), FadeOut(rarr, shift=DOWN), FadeOut(mathSym, shift=DOWN), FadeOut(REx, shift=DOWN))
        self.wait()


        R2 = Tex(r'$\mathbb{R}^2$', font_size=20)
        self.play(FadeIn(R2, shift=DOWN))
        self.wait()
        xy = Tex(r'$\ni (a,b) = x, (c,d) = y$', font_size=20).next_to(R2, RIGHT*.5)
        self.play(R2.animate.shift(LEFT), FadeIn(xy, shift=DOWN), xy.animate.shift(LEFT))
        self.wait()
        self.play(R2.animate.shift(LEFT*.65 + UP*1.15), FadeOut(xy))
        self.wait()

        grid = NumberPlane(x_range=(-7, 7, 1), y_range=(-7, 7, 1), x_length=5, y_length=5)
        x_dot = Dot().shift(RIGHT*.3 + UP).scale(.3)
        x_dot_text = Text('x', font_size=15).next_to(x_dot, RIGHT*.25 + UP*.25)
        y_dot = Dot().shift(LEFT + DOWN*.3).scale(.3)
        y_dot_text = Text('y', font_size=15).next_to(y_dot, RIGHT*.25 + UP*.25)
        x_plus_y = Dot().shift(RIGHT*.3 + LEFT + UP + DOWN*.3).scale(.3)
        x_plus_y_text = Text('x+y', font_size=15).next_to(x_plus_y, RIGHT*.25 + UP*.25)
        arrow_x = Arrow(start = ORIGIN, end = RIGHT*.3 + UP, buff=0, max_stroke_width_to_length_ratio=2, max_tip_length_to_length_ratio=.15)
        arrow_y = Arrow(start = ORIGIN, end = LEFT + DOWN*.3, buff=0, max_stroke_width_to_length_ratio=2, max_tip_length_to_length_ratio=.15)
        arrow_x_plus_y = Arrow(start = RIGHT*.3 + UP, end = RIGHT*.3 + LEFT + UP + DOWN*.3, buff=0, max_stroke_width_to_length_ratio=2, max_tip_length_to_length_ratio=.15)
        arrow_y_plus_x = Arrow(start = LEFT + DOWN*.3, end = RIGHT*.3 + LEFT + UP + DOWN*.3, buff=0, max_stroke_width_to_length_ratio=2, max_tip_length_to_length_ratio=.15)
        self.add(grid, R2)
        self.play(Create(grid, run_time=3, lag_ratio=.1))
        self.wait()
        self.play(FadeIn(x_dot), FadeIn(x_dot_text), FadeIn(y_dot), FadeIn(y_dot_text))
        self.wait()
        self.play(Create(arrow_x), Create(arrow_y))
        self.wait()
        self.play(FadeIn(x_plus_y), FadeIn(x_plus_y_text))
        self.wait()
        self.play(Create(arrow_x_plus_y), Create(arrow_y_plus_x))
        self.wait()

        parallelogram = Polygon(ORIGIN, x_dot.get_center(), x_plus_y.get_center(), y_dot.get_center())
        self.play(Create(parallelogram), Uncreate(grid, run_time=3, lag_ratio=.1), FadeOut(x_dot), FadeOut(y_dot), FadeOut(x_dot_text), FadeOut(y_dot_text), FadeOut(arrow_x), FadeOut(arrow_y), FadeOut(x_plus_y), FadeOut(x_plus_y_text), FadeOut(arrow_x_plus_y), FadeOut(arrow_y_plus_x))
        self.wait()
        self.play(parallelogram.animate.shift(RIGHT*.3 + DOWN*.3))
        self.wait()
        line_x1 = Line(start=parallelogram.get_vertices()[0], end=parallelogram.get_vertices()[1])
        line_x2 = Line(start=parallelogram.get_vertices()[3], end=parallelogram.get_vertices()[2])
        self.play(Create(line_x1), Create(line_x2))
        self.wait()
        line_y1 = Line(start=parallelogram.get_vertices()[0], end=parallelogram.get_vertices()[3], color=RED)
        line_y2 = Line(start=parallelogram.get_vertices()[1], end=parallelogram.get_vertices()[2], color=RED)
        self.play(Create(line_y1), Create(line_y2))
        self.wait()
